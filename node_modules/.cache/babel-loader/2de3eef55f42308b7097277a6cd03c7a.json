{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adity\\\\OneDrive\\\\Desktop\\\\react-sentiment-analyzer\\\\src\\\\components\\\\InputForm.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport flow from 'lodash/flow';\nimport { analyzeSentiment, analyzeToxicity } from '../actions/analyze';\nimport { getValueFromEvent, parseSentiment, parseToxicity } from '../utils/utils';\nvar inputFormStyles = Object.freeze({\n  containerStyles: Object.freeze({\n    height: 'calc(100vh - 56px)',\n    width: '100%'\n  }),\n  reportSectionStyles: Object.freeze({\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    height: '40%'\n  }),\n  reportHeaderStyles: Object.freeze({\n    padding: '0.75rem'\n  }),\n  formStyles: Object.freeze({\n    display: 'flex',\n    flexDirection: 'column',\n    width: '100%',\n    height: 'calc(100% - 40% - 56px)',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }),\n  buttonStyles: Object.freeze({\n    margin: '1rem',\n    height: '50px'\n  }),\n  textFieldStyles: Object.freeze({\n    width: '17rem',\n    height: '100%'\n  })\n});\n\nfunction InputForm(_ref) {\n  var value = _ref.value,\n      analyzeInputSentiment = _ref.analyzeInputSentiment,\n      sentiment = _ref.sentiment,\n      toxicity = _ref.toxicity,\n      fetching = _ref.fetching,\n      analyzeInputToxicity = _ref.analyzeInputToxicity;\n\n  var reportSection = function () {\n    var toxicityScore = React.createElement(Typography, {\n      variant: \"h5\",\n      style: inputFormStyles.reportHeaderStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Toxicity Prediction: \", toxicity ? toxicity.probability : '?');\n\n    if (!sentiment || !sentiment.score) {\n      return React.createElement(\"div\", {\n        style: inputFormStyles.reportSectionStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h2\",\n        style: inputFormStyles.reportHeaderStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        role: \"img\",\n        \"aria-label\": \"neutral face\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"\\uD83D\\uDE10\")), React.createElement(Typography, {\n        variant: \"h5\",\n        style: inputFormStyles.reportHeaderStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Sentiment Score: 0\"), toxicityScore);\n    }\n\n    var emoji = sentiment.score > 0 ? '😀' : '😠';\n    return React.createElement(\"div\", {\n      style: inputFormStyles.reportSectionStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h2\",\n      style: inputFormStyles.reportHeaderStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": sentiment.score > 0 ? 'grinning face' : 'angry face',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, emoji)), React.createElement(Typography, {\n      variant: \"h5\",\n      style: inputFormStyles.reportHeaderStyles,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Sentiment Score: \", sentiment.score), toxicityScore);\n  }();\n\n  var buttonElement = fetching ? React.createElement(CircularProgress, {\n    style: inputFormStyles.buttonStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }) : React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    disabled: fetching,\n    onClick: analyzeInputToxicity,\n    style: inputFormStyles.buttonStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"Analyze Toxicity\");\n  return React.createElement(Paper, {\n    style: inputFormStyles.containerStyles,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, reportSection, React.createElement(\"form\", {\n    noValidate: true,\n    autoComplete: \"off\",\n    style: inputFormStyles.formStyles,\n    onSubmit: analyzeInputToxicity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, buttonElement, React.createElement(TextField, {\n    style: inputFormStyles.textFieldStyles,\n    label: \"Text to analyze\",\n    value: value,\n    onChange: analyzeInputSentiment,\n    margin: \"normal\",\n    multiline: true,\n    disabled: fetching,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  })));\n}\n\nfunction mapStateToProps(_ref2) {\n  var _ref2$analyze = _ref2.analyze,\n      input = _ref2$analyze.input,\n      sentiment = _ref2$analyze.sentiment,\n      _ref2$analyze$toxicit = _ref2$analyze.toxicity,\n      data = _ref2$analyze$toxicit.data,\n      fetching = _ref2$analyze$toxicit.fetching,\n      error = _ref2$analyze$toxicit.error;\n  return {\n    input: input,\n    sentiment: sentiment ? parseSentiment(sentiment) : null,\n    toxicity: data ? parseToxicity(data) : null,\n    fetching: fetching,\n    error: error\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    analyzeInputSentiment: flow(getValueFromEvent, analyzeSentiment, dispatch),\n    analyzeInputToxicity: flow(analyzeToxicity, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);","map":{"version":3,"sources":["C:\\Users\\adity\\OneDrive\\Desktop\\react-sentiment-analyzer\\src\\components\\InputForm.jsx"],"names":["React","connect","Paper","Typography","TextField","Button","CircularProgress","flow","analyzeSentiment","analyzeToxicity","getValueFromEvent","parseSentiment","parseToxicity","inputFormStyles","Object","freeze","containerStyles","height","width","reportSectionStyles","display","justifyContent","flexDirection","alignItems","reportHeaderStyles","padding","formStyles","buttonStyles","margin","textFieldStyles","InputForm","value","analyzeInputSentiment","sentiment","toxicity","fetching","analyzeInputToxicity","reportSection","toxicityScore","probability","score","emoji","buttonElement","mapStateToProps","analyze","input","data","error","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport flow from 'lodash/flow';\r\n\r\nimport { analyzeSentiment, analyzeToxicity } from '../actions/analyze';\r\n\r\nimport {\r\n    getValueFromEvent,\r\n    parseSentiment,\r\n    parseToxicity,\r\n} from '../utils/utils';\r\n\r\nconst inputFormStyles = Object.freeze({\r\n    containerStyles: Object.freeze({\r\n        height: 'calc(100vh - 56px)',\r\n        width: '100%',\r\n    }),\r\n    reportSectionStyles: Object.freeze({\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        height: '40%',\r\n    }),\r\n    reportHeaderStyles: Object.freeze({\r\n        padding: '0.75rem',\r\n    }),\r\n    formStyles: Object.freeze({\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '100%',\r\n        height: 'calc(100% - 40% - 56px)',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    }),\r\n    buttonStyles: Object.freeze({\r\n        margin: '1rem',\r\n        height: '50px',\r\n    }),\r\n    textFieldStyles: Object.freeze({\r\n        width: '17rem',\r\n        height: '100%',\r\n    }),\r\n});\r\n\r\nfunction InputForm({\r\n    value,\r\n    analyzeInputSentiment,\r\n    \r\n    sentiment,\r\n    toxicity,\r\n    fetching,\r\n    \r\n    analyzeInputToxicity,\r\n}) {\r\n    const reportSection = (() => {\r\n        const toxicityScore = (\r\n            <Typography variant=\"h5\" style={inputFormStyles.reportHeaderStyles}>\r\n                Toxicity Prediction: {toxicity ? toxicity.probability : '?'}\r\n            </Typography>\r\n        );\r\n\r\n        if (!sentiment || !sentiment.score) {\r\n            return (\r\n                <div style={inputFormStyles.reportSectionStyles}>\r\n                    <Typography\r\n                        variant=\"h2\"\r\n                        style={inputFormStyles.reportHeaderStyles}\r\n                    >\r\n                        <span role=\"img\" aria-label=\"neutral face\">\r\n                            😐\r\n                        </span>\r\n                    </Typography>\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        style={inputFormStyles.reportHeaderStyles}\r\n                    >\r\n                        Sentiment Score: 0\r\n                    </Typography>\r\n                    {toxicityScore}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const emoji = sentiment.score > 0 ? '😀' : '😠';\r\n\r\n        return (\r\n            <div style={inputFormStyles.reportSectionStyles}>\r\n                <Typography\r\n                    variant=\"h2\"\r\n                    style={inputFormStyles.reportHeaderStyles}\r\n                >\r\n                    <span\r\n                        role=\"img\"\r\n                        aria-label={\r\n                            sentiment.score > 0 ? 'grinning face' : 'angry face'\r\n                        }\r\n                    >\r\n                        {emoji}\r\n                    </span>\r\n                </Typography>\r\n                <Typography\r\n                    variant=\"h5\"\r\n                    style={inputFormStyles.reportHeaderStyles}\r\n                >\r\n                    Sentiment Score: {sentiment.score}\r\n                </Typography>\r\n                {toxicityScore}\r\n            </div>\r\n        );\r\n    })();\r\n\r\n    const buttonElement = fetching ? (\r\n        <CircularProgress style={inputFormStyles.buttonStyles} />\r\n    ) : (\r\n        <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={fetching}\r\n            onClick={analyzeInputToxicity}\r\n            style={inputFormStyles.buttonStyles}\r\n        >\r\n            Analyze Toxicity\r\n        </Button>\r\n    );\r\n\r\n    return (\r\n        <Paper style={inputFormStyles.containerStyles}>\r\n            {reportSection}\r\n            <form\r\n                noValidate\r\n                autoComplete=\"off\"\r\n                style={inputFormStyles.formStyles}\r\n                onSubmit={analyzeInputToxicity}\r\n            >\r\n                {buttonElement}\r\n                <TextField\r\n                    style={inputFormStyles.textFieldStyles}\r\n                    label=\"Text to analyze\"\r\n                    value={value}\r\n                    onChange={analyzeInputSentiment}\r\n                    margin=\"normal\"\r\n                    multiline\r\n                    disabled={fetching}\r\n                />\r\n            </form>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps({\r\n    analyze: {\r\n        input,\r\n        sentiment,\r\n        toxicity: { data, fetching, error },\r\n    },\r\n}) {\r\n    return {\r\n        input,\r\n        sentiment: sentiment ? parseSentiment(sentiment) : null,\r\n        toxicity: data ? parseToxicity(data) : null,\r\n        fetching,\r\n        error,\r\n    };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        analyzeInputSentiment: flow(\r\n            getValueFromEvent,\r\n            analyzeSentiment,\r\n            dispatch,\r\n        ),\r\n        analyzeInputToxicity: flow(\r\n            analyzeToxicity,\r\n            dispatch,\r\n        ),\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(InputForm);\r\n"]},"metadata":{},"sourceType":"module"}