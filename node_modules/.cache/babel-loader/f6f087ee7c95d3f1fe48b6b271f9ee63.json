{"ast":null,"code":"//     wink-sentiment\n//     Accurate and fast sentiment scoring of phrases with hashtags, emoticons & emojis.\n//\n//     Copyright (C) 2017-18  GRAYPE Systems Private Limited\n//\n//     This file is part of “wink-sentiment”.\n//\n//     Permission is hereby granted, free of charge, to any person obtaining a\n//     copy of this software and associated documentation files (the \"Software\"),\n//     to deal in the Software without restriction, including without limitation\n//     the rights to use, copy, modify, merge, publish, distribute, sublicense,\n//     and/or sell copies of the Software, and to permit persons to whom the\n//     Software is furnished to do so, subject to the following conditions:\n//\n//     The above copyright notice and this permission notice shall be included\n//     in all copies or substantial portions of the Software.\n//\n//     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n//     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n//     THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n//     FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n//     DEALINGS IN THE SOFTWARE.\n//\nvar emojis = require('./emojis.js');\n\nvar afinn = require('./afinn-en-165.js');\n\nvar emoticons = require('./emoticons.js');\n\nvar negations = require('./negations.js');\n\nvar affin2Grams = require('./afinn-en-165-2grams.js');\n\nvar tokenize = require('wink-tokenizer')().tokenize;\n/* eslint max-depth: 0 */\n// ### normalize\n\n/**\n *\n * Computes the normalized sentiment score from the absolute scores.\n *\n * @param {number} hss absolute sentiment scrore of hashtags.\n * @param {number} wss absolute sentiment scrore of words/emojis/emoticons.\n * @param {number} sentiHashtags number of hashtags that have an associated sentiment score.\n * @param {number} sentiWords wnumber of words that have an associated sentiment score.\n * @param {number} totalWords total number of words in the text.\n * @return {number} normalized score.\n * @private\n*/\n\n\nvar normalize = function normalize(hss, wss, sentiHashtags, sentiWords, totalWords) {\n  // **N**ormalized **h**ashtags & **w**ords **s**entiment **s**cores.\n  var nhss = 0,\n      nwss = 0; // 1. Normalize hashtags sentiment score by computing the average.\n\n  if (sentiHashtags) nhss = hss / sentiHashtags;\n\n  if (sentiWords) {\n    // 2. Normalize words sentiment score by computing the average.\n    nwss = wss / sentiWords; // 3. Normalized words sentiment score is further adjusted on the basis of the\n    // total number of words in the text.\n    // Average sentence length in words (assumed).\n\n    var avgLength = 15; // Make adjustments.\n\n    nwss /= Math.sqrt(totalWords > avgLength ? totalWords / avgLength : 1);\n  }\n\n  return nhss && nwss ? (nhss + nwss) / 2 : nwss || nhss;\n}; // normalize()\n// ### sentiment\n\n/**\n *\n * Computes the absolue and normalized sentiment scores of the input `phrase`,\n * after tokenizing it.\n *\n * The normalized score is computed by taking into account of absolute scores of\n * words, emojis, emoticons, and hashtags and adjusting it on the basis of total\n * words in the text; this is always between -5 and +5. A score of less than 0 indicates\n * negative sentiments and a score of more than 0 indicates positive sentiments;\n * wheras a near zero score suggests a neutral sentiment. While counting tokens\n * only the ones tagged as **`word`**, **`emoji`**, or **`emoticon`** are counted;\n * and one letter words are ignored.\n *\n * It performs tokenization using [wink-tokenizer](http://winkjs.org/wink-tokenizer/).\n * During sentiment analysis, each token may be assigned up to 3 new properties.\n * These properties are:\n *\n * 1. **`score`** — contains the sentiment score of the word, emoji, emoticon or hashtag, which is always\n * between -5 and +5. This is added only when the word in question has a positive or\n * negative sentiment associated with it.\n * 2. **`negation`** — is added & set to **true** whenever the `score` of the\n * token has beeen impacted due to a negation word apprearing prior to it.\n * 3. **`grouped`** — is added whenever, the token is the first\n * word of a short idiom or a phrase. It's value provides the number of tokens\n * that have been grouped together to form the phrase/idiom.\n *\n * @param {string} phrase whoes sentiment score needs to be computed.\n * @return {object} absolute `score`, `normalizedScore` and `tokenizedPhrase` of `phrase`.\n *\n * @example\n * sentiment( 'not a good product #fail' );\n * // -> { score: -5,\n * //      normalizedScore: -2.5,\n * //      tokenizedPhrase: [\n * //        { value: 'not', tag: 'word' },\n * //        { value: 'a', tag: 'word' },\n * //        { value: 'good', tag: 'word', negation: true, score: -3 },\n * //        { value: 'product', tag: 'word' },\n * //        { value: '#fail', tag: 'hashtag', score: -2 }\n * //      ]\n * //    }\n */\n\n\nvar sentiment = function sentiment(phrase) {\n  if (typeof phrase !== 'string') {\n    throw Error('wink-sentiment: input phrase must be a string, instead found: ' + typeof phrase);\n  } // Early exit.\n\n\n  var tokenizedPhrase = tokenize(phrase);\n  if (tokenizedPhrase.length === 0) return {\n    score: 0,\n    normalizedScore: 0\n  }; // Sentiment Score.\n\n  var ss = 0; // Hash Tags SS.\n\n  var hss = 0; // Number of sentiment containing hashtags and words encountered.\n\n  var sentiHashtags = 0,\n      sentiWords = 0; // Number of words encountered.\n\n  var words = 0; // Helpers: for loop indexes, token, temp ss, and word count.\n\n  var k, kmax, t, tkn, tss, wc;\n\n  for (k = 0, kmax = tokenizedPhrase.length; k < kmax; k += 1) {\n    tkn = tokenizedPhrase[k];\n    t = tkn.value;\n\n    switch (tkn.tag) {\n      case 'emoji':\n        tss = emojis[t];\n\n        if (tss) {\n          ss += tss;\n          tkn.score = tss;\n          sentiWords += 1;\n        }\n\n        words += 1;\n        break;\n\n      case 'emoticon':\n        tss = emoticons[t];\n\n        if (tss) {\n          ss += tss;\n          tkn.score = tss;\n          sentiWords += 1;\n        }\n\n        words += 1;\n        break;\n\n      case 'hashtag':\n        tss = afinn[t.slice(1).toLowerCase()];\n\n        if (tss) {\n          tkn.score = tss;\n          hss += tss;\n          sentiHashtags += 1;\n        }\n\n        break;\n\n      case 'word':\n        t = t.toLowerCase();\n        wc = 1; // Check for bigram configurations i.e. token at `k` and `k+1`. Accordingly\n        // compute the sentiment score in `tss`. Convert to Lower Case for case insensitive comparison.\n\n        if (k < kmax - 1 && affin2Grams[t] && affin2Grams[t][tokenizedPhrase[k + 1].value.toLowerCase()] !== undefined) {\n          tss = affin2Grams[t][tokenizedPhrase[k + 1].value.toLowerCase()];\n          tkn.grouped = 1; // Will have to count `2` words!\n\n          wc = 2; // sentiWords += 1;\n        } else {\n          tss = afinn[t] || 0; // sentiWords += 1;\n        } // Check for negation — upto two words ahead; even a bigram AFINN config may be negated! Convert to Lower Case for case insensitive comparison.\n\n\n        if (k > 0 && negations[tokenizedPhrase[k - 1].value.toLowerCase()] || k > 1 && negations[tokenizedPhrase[k - 2].value.toLowerCase()]) {\n          tss = -tss;\n          tkn.negation = true;\n        }\n\n        ss += tss; // Increment `k` by 1 if a bigram config was found earlier i.e. `wc` was set to **2**.\n\n        k += wc - 1;\n\n        if (tss) {\n          tkn.score = tss;\n          sentiWords += 1;\n        } // Update number of words accordingly.\n\n\n        words += wc;\n        break;\n\n      default: // Do Nothing!\n\n    } // swtich ( t.tag )\n\n  } // if ( words === 0 ) words = 1;\n  // Return score and its normalized value.\n\n\n  return {\n    score: ss + hss,\n    normalizedScore: +normalize(hss, ss, sentiHashtags, sentiWords, words).toFixed(4),\n    tokenizedPhrase: tokenizedPhrase\n  };\n}; // sentiment()\n\n\nmodule.exports = sentiment;","map":null,"metadata":{},"sourceType":"script"}